# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import service_pb2 as service__pb2


class RawImageStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RawImageDimens = channel.unary_unary(
                '/RawImage/RawImageDimens',
                request_serializer=service__pb2.rawImageMsg.SerializeToString,
                response_deserializer=service__pb2.imageReply.FromString,
                )


class RawImageServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RawImageDimens(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RawImageServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RawImageDimens': grpc.unary_unary_rpc_method_handler(
                    servicer.RawImageDimens,
                    request_deserializer=service__pb2.rawImageMsg.FromString,
                    response_serializer=service__pb2.imageReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'RawImage', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RawImage(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RawImageDimens(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RawImage/RawImageDimens',
            service__pb2.rawImageMsg.SerializeToString,
            service__pb2.imageReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AddStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddNums = channel.unary_unary(
                '/Add/AddNums',
                request_serializer=service__pb2.addMsg.SerializeToString,
                response_deserializer=service__pb2.addReply.FromString,
                )


class AddServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddNums(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AddServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddNums': grpc.unary_unary_rpc_method_handler(
                    servicer.AddNums,
                    request_deserializer=service__pb2.addMsg.FromString,
                    response_serializer=service__pb2.addReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Add', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Add(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddNums(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Add/AddNums',
            service__pb2.addMsg.SerializeToString,
            service__pb2.addReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class DotProductStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DotProd = channel.unary_unary(
                '/DotProduct/DotProd',
                request_serializer=service__pb2.dotProductMsg.SerializeToString,
                response_deserializer=service__pb2.dotProductReply.FromString,
                )


class DotProductServicer(object):
    """Missing associated documentation comment in .proto file."""

    def DotProd(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DotProductServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DotProd': grpc.unary_unary_rpc_method_handler(
                    servicer.DotProd,
                    request_deserializer=service__pb2.dotProductMsg.FromString,
                    response_serializer=service__pb2.dotProductReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'DotProduct', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DotProduct(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def DotProd(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DotProduct/DotProd',
            service__pb2.dotProductMsg.SerializeToString,
            service__pb2.dotProductReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class JsonImageStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.JsonImageDimens = channel.unary_unary(
                '/JsonImage/JsonImageDimens',
                request_serializer=service__pb2.jsonImageMsg.SerializeToString,
                response_deserializer=service__pb2.imageReply.FromString,
                )


class JsonImageServicer(object):
    """Missing associated documentation comment in .proto file."""

    def JsonImageDimens(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_JsonImageServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'JsonImageDimens': grpc.unary_unary_rpc_method_handler(
                    servicer.JsonImageDimens,
                    request_deserializer=service__pb2.jsonImageMsg.FromString,
                    response_serializer=service__pb2.imageReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'JsonImage', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class JsonImage(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def JsonImageDimens(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/JsonImage/JsonImageDimens',
            service__pb2.jsonImageMsg.SerializeToString,
            service__pb2.imageReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
